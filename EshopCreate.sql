--Drop tables
DROP TABLE IF EXISTS STORE_PAYOUTS;
DROP TABLE IF EXISTS PAYMENTS;
DROP TABLE IF EXISTS PURCHASE_VENDOR_MAPPING;
DROP TABLE IF EXISTS PURCHASE_ITEMS;
DROP TABLE IF EXISTS PURCHASES;
DROP TABLE IF EXISTS PROD_CAT;
DROP TABLE IF EXISTS PRODUCTS_CATEGORIES;
DROP TABLE IF EXISTS PRODUCTS;
DROP TABLE IF EXISTS STORES;
DROP TABLE IF EXISTS USERS;


-- Create USERS Table
CREATE TABLE USERS (
    USER_ID INT PRIMARY KEY IDENTITY(1,1),
    NAME NVARCHAR(200) NOT NULL,
    EMAIL NVARCHAR(100) NOT NULL UNIQUE,
    PASSWORD_HASH NVARCHAR(255) NOT NULL,
    SALT NVARCHAR(50) NOT NULL,
    TELEPHONE NVARCHAR(15) CHECK (TELEPHONE LIKE '[0-9]%'),
    ADDRESS NVARCHAR(200) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

-- Create STORES Table
CREATE TABLE STORES (
    STORE_ID INT PRIMARY KEY IDENTITY(1,1),
    STORE_NAME NVARCHAR(100) NOT NULL UNIQUE,
    EMAIL NVARCHAR(100) NOT NULL UNIQUE,
    IMAGE NVARCHAR(255),
    CATEGORY NVARCHAR(100),
    PASSWORD_HASH NVARCHAR(255) NOT NULL,
    SALT NVARCHAR(50) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

-- Create PRODUCTS Table
CREATE TABLE PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY IDENTITY(1,1),
    STORE_ID INT NOT NULL,
    PRODUCT_NAME NVARCHAR(100) NOT NULL,
    DESCRIPTION NVARCHAR(200),
    IMAGE NVARCHAR(255),
    PRICE DECIMAL(10,2) NOT NULL,
    STOCK_QUANTITY INT NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_PRODUCTS_STORES FOREIGN KEY (STORE_ID) REFERENCES STORES(STORE_ID) ON DELETE CASCADE
);

-- Create PRODUCTS_CATEGORIES Table
CREATE TABLE PRODUCTS_CATEGORIES (
    CATEGORY_ID INT PRIMARY KEY IDENTITY(1,1),
    CATEGORY_NAME NVARCHAR(100) NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    UPDATED_AT DATETIME DEFAULT GETDATE()
);

-- Create PROD_CAT Table (Many-to-Many Relationship between PRODUCTS and PRODUCTS_CATEGORIES)
CREATE TABLE PROD_CAT (
    PRODUCT_ID INT NOT NULL,
    CATEGORY_ID INT NOT NULL,
    PRIMARY KEY (PRODUCT_ID, CATEGORY_ID),
    CONSTRAINT FK_PROD_CAT_PRODUCTS FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE CASCADE,
    CONSTRAINT FK_PROD_CAT_CATEGORIES FOREIGN KEY (CATEGORY_ID) REFERENCES PRODUCTS_CATEGORIES(CATEGORY_ID) ON DELETE CASCADE
);

-- Create PURCHASES Table
CREATE TABLE PURCHASES (
    PURCHASE_ID INT PRIMARY KEY IDENTITY(1,1),
    USER_ID INT NOT NULL,
    TOTAL_PRICE DECIMAL(10,2) NOT NULL,
    PAYMENT_STATUS NVARCHAR(50) NOT NULL CHECK (PAYMENT_STATUS IN ('Pending', 'Completed', 'Failed')),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_PURCHASES_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Create PURCHASE_ITEMS Table
CREATE TABLE PURCHASE_ITEMS (
    PURCHASE_ITEM_ID INT PRIMARY KEY IDENTITY(1,1),
    PURCHASE_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    QUANTITY INT NOT NULL,
    PRICE_AT_PURCHASE DECIMAL(10,2) NOT NULL,
    CONSTRAINT FK_PURCHASE_ITEMS_PURCHASES FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASES(PURCHASE_ID) ON DELETE CASCADE,
    CONSTRAINT FK_PURCHASE_ITEMS_PRODUCTS FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE CASCADE
);

-- Create PURCHASE_VENDOR_MAPPING Table
CREATE TABLE PURCHASE_VENDOR_MAPPING (
    PURCHASE_VENDOR_ID INT PRIMARY KEY IDENTITY(1,1),
    PURCHASE_ID INT NOT NULL,
    VENDOR_ID INT NOT NULL,
    VENDOR_AMOUNT DECIMAL(10,2) NOT NULL,
    CONSTRAINT FK_PURCHASE_VENDOR_MAPPING_PURCHASES FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASES(PURCHASE_ID) ON DELETE CASCADE,
    CONSTRAINT FK_PURCHASE_VENDOR_MAPPING_STORES FOREIGN KEY (VENDOR_ID) REFERENCES STORES(STORE_ID) ON DELETE CASCADE
);

-- Create PAYMENTS Table
CREATE TABLE PAYMENTS (
    PAYMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    PURCHASE_ID INT NOT NULL,
    USER_ID INT NOT NULL,
    PAYMENT_METHOD NVARCHAR(50) NOT NULL,
    TRANSACTION_ID NVARCHAR(100) NOT NULL,
    AMOUNT DECIMAL(10,2) NOT NULL,
    PAYMENT_DATE DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_PAYMENTS_PURCHASES FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASES(PURCHASE_ID),
    CONSTRAINT FK_PAYMENTS_USERS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Create STORE_PAYOUTS Table
CREATE TABLE STORE_PAYOUTS (
    PAYOUT_ID INT PRIMARY KEY IDENTITY(1,1),
    STORE_ID INT NOT NULL,
    PURCHASE_ID INT NOT NULL,
    PAYOUT_AMOUNT DECIMAL(10,2) NOT NULL,
    PAYOUT_STATUS NVARCHAR(50) NOT NULL CHECK (PAYOUT_STATUS IN ('Pending', 'Paid', 'Failed')),
    PAYOUT_DATE DATETIME DEFAULT GETDATE(),
    PAYOUT_METHOD NVARCHAR(50),
    CONSTRAINT FK_STORE_PAYOUTS_STORES FOREIGN KEY (STORE_ID) REFERENCES STORES(STORE_ID) ON DELETE CASCADE,
    CONSTRAINT FK_STORE_PAYOUTS_PURCHASES FOREIGN KEY (PURCHASE_ID) REFERENCES PURCHASES(PURCHASE_ID) ON DELETE CASCADE
);


-- Enable IDENTITY_INSERT for the USERS table
SET IDENTITY_INSERT USERS ON;

-- Insert the default user (USER_ID = 0)
INSERT INTO USERS (USER_ID, NAME, EMAIL, PASSWORD_HASH, SALT, TELEPHONE, ADDRESS, CREATED_AT, UPDATED_AT)
VALUES (0, 'Deleted User', 'deleted@example.com', 'ZxYwJw094c', 'Zx094owCc', '12345678', 'deleted', GETDATE(), GETDATE());

-- Disable IDENTITY_INSERT for the USERS table
SET IDENTITY_INSERT USERS OFF;

SELECT * FROM USERS;

-- Create a Stored Procedure to Handle User Deletion
CREATE PROCEDURE SP_DELETE_USER(@USER_ID INT)
AS
    -- Update PURCHASES Table
    UPDATE PURCHASES
    SET USER_ID = 0
    WHERE USER_ID = @USER_ID;

    -- Update PAYMENTS Table
    UPDATE PAYMENTS
    SET USER_ID = 0
    WHERE USER_ID = @USER_ID;

    -- Delete the User
    DELETE FROM USERS
    WHERE USER_ID = @USER_ID;
GO